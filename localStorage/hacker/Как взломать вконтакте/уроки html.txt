Урок 7. Таблицы.
Сегодня мы рассмотрим очень важную тему - таблицы. Они являются одной из основных способов верстки. Сама по себе тема не сложная, но очень важная.
И так, создание любой таблицы начинается с тега <table>. Он парный, как и все теги, которые используются в таблицах, поэтому далее я не буду уточнять, что они парные. После тега <table> должен идти тег <tbody>. Фактически, писать его не обязательно, браузер его вставляет сам автоматически, но все же я рекомендую его всегда писать, так как потом могут возникнуть проблемы с css. Далее нам нужно создать строку в таблице с помощью тега <tr>. Теперь мы создаем ячейку в строке при помощь тега <td>. Количество ячеек и строк в таблице неограниченно, но есть ограничение: все ячейки выравниваются по столбцам, в зависимости от наибольшего количества столбцов в одной строке.
Например, если мы создадим таблицу с двумя ячейки, в одной из которых будет две ячейки, а в другой три. В первом столбце будет две ячейки одинаковых размеров. Во втором столбце также. В третьем же столбце будет одна ячейка, которая будет находиться в той строке, в которой было три ячейки, а во второй строке будет просто пустое место, которое будет считаться элементом таблицы, но не будет являться ячейкой. Соответственно, если мы во второй ячейки строки, в которой было две ячейки, напишем текст и выравняем его по центру, то он будет размещен во втором столбце и не сможет занять место в третьем столбце. Смотрите примеры, если не понятно.
Если вам нужно создать таблицу как из примера, то тут будет два выхода:
1) Применить основу табличной верстки и разместить "таблицу в таблице". На каждой строке вы создаете одну ячейку и в ней создаете новую таблицу. Тогда подобного ограничения не появится, но будут отступы внутри ячейки, от которых можно избавиться с помощью css, поэтому пока что не рассматриваем. См. пример(В примере использовано css-свойство text-align, оно отвечает за ориентацию текста в блоке, а также свойство width, отвечающее за размер элемента.)
2) Применить атрибут colspan. Его нельзя использоваться в css, поэтому этот вариант нам не подходит, но все же я о нем расскажу, так как иногда и сам им пользуюсь. Этот атрибут "растягивает" ячейку на указанное количество ячеек. В примере, ко второй ячейке строки, в которой было две ячейки, мы дописываем colspan="2" и эта ячейка начинает занимать как бы 2 столбца и любой текст, если его выравнивать по центру, будет центрироваться относительно стыка второго и третьего столбца. См. пример(В примере использовано css-свойство text-align, оно отвечает за ориентацию текста в блоке.)
Еще важное замечание: если в ячейку ничего не написать, то она не будет отображаться. Если вам нужна пустая ячейка, то впишите в нее &nbsp; - это код неразрывного пробела. Неразрывность означает, что вы можете навставлять его много раз и он не будет делаться в один пробел.
Вот и все, что я могу рассказать о таблицах, пока что. Позже, когда будем изучать css, мы еще вернемся к ним. 

Урок 6. Теги разметки html. Строчные теги.
Давненько не было уроков, извиняюсь, был очень занят).
Сегодня мы разберемся со строчными тегами. Поехали:
1) тег <a> - ссылка. Парный. Этот тег придется использовать достаточно часто, если вы хотите сделать хорошую навигацию на своем сайте. Интересно то, что эта ссылка переходит на документ, то есть, адресом можно указать какую-нибудь картинку, а не сайт. Адрес задается в атрибуте href. Между <a> и </a> не обязательно должен быть заключен текст, там может находиться и картинка.
2) теги <b> и <strong> - жирный шрифт. Парные.
3) тег <bdo> - направление текста. Парный. Направление указывается в атрибуте dir. Возможно всего два значения - rtl (слева направо) и ltr (справа налево).
4) тег <br> - перенос строки. Одиночный. Если не понятно, что он делает, то смотрите пример.
5) теги <i> и <em> - курсивный шрифт. Парные.
6) тег <input> - элемент формы. Одиночный. Когда дойдем до форм, остановимся на нем подробнее, а сейчас он не представляет интереса.
7) тег <select> - группирует теги <option>. Парный. Тоже является элементом формы, останавливаться пока что не будем.
8) тег <span> - строчный элемент, просто текст. Парный. Чаще всего именно им пользуются для создания текстовых разделов. Уникальных атрибутов у него нет.
9) теги <sub> и <sup> - нижний и верхний индексы соответственно. Парные.
10) тег <textarea> - многострочное поле ввода. Парный. Является элементом формы, так что пропускаем его.
11) тег <s> - зачеркнутый текст. Парный.
12) тег <img> - картинка. Одиночный. Да, я не ошибся, это строчный тег. Путь к картинке указывается в атрибуте src. Размер картинки можно регулировать, но лучше это делать с помощью css-документа, до которого мы еще не дошли.
Для хорошей верстки сайтов этого набора тегов достаточно. Конечно, все я не перечислю. Хотя бы потому что многие из них не используются. Когда дойдем до css, количество строчных тегов, которыми мы будем пользоваться, уменьшится до 6 (или 7, если вам понравится <textarea>, но мне он не нравится).
Домашки сегодня не будет. Просто тема очень легкая и придумать задания, кроме как написать жирный курсивный шрифт и вставить картинку с ссылкой, я не могу. Попишите код с сегодняшними тегами, чтобы получше с ними познакомиться.

Урок 5. Основы html. Тег <body> и что в нем писать.
Итак, пришла пора перейти к написанию того, что будет отображаться на странице. Все это должно помещаться в тег (он парный, конечно же) <body>. Размещать его нужно сразу после тега <head>, с которым мы познакомились в предыдущем уроке. Теперь все последующие теги (до того, как мы перейдем к css) будут рассматриваться исключительно в <body>. Все атрибуты этого тега по всем существующим стандартам (и по нашему тоже), считаются невалидными, то есть не рекомендуемыми к использованию. Поэтому я не вижу смысла на них останавливаться. Все равно их аналоги будут рассмотрены при изучении css.
Давайте (наконец-то) перейдем к наполнению страницы контентом. Все теги можно разделить на две группы - блочные и строчные. С помощью блочных элементов создается "каркас" страницы, а с помощью строчных - заполнение этого каркаса. В строчный элемент можно поместить только данные или другие срочные элементы, а в блочные можно помещать данные, строчные элементы и другие блочные элементы. Блочные элементы, в отличие от строчных, принято писать с новой строки. Сегодня мы не будем рассматривать никакие новые теги, но все же, давайте поместим какую-нибудь информацию на нашу страницу. Для этого достаточно просто внутри тега <body> написать текст.
Урок получился небольшим, но следующий будет больше чем обычно. Как всегда, прикрепляю примеры. Кстати, возможно, со следующего урока пойдет первое домашнее задание!

Урок 4. Основы html. Тег <head> и что в нем прописывать.
Сегодня мы познакомимся с тегом <head>. В этом теге прописывается то, что не будет видно пользователю на странице (кроме тега <title>, разберем его попозже). Он является парным и указывается внутри тега <html>. Его параметры не представляют для нас интереса, поэтому давайте разберем, что в нем можно писать.
Сначала отмечу, что писать в нем можно любой тег и он будет отображаться на странице, но так делать категорически не следует, потому что для этого предназначен другой тег, который мы рассмотрим в следующих уроках. Итак, начнем с тегов, которые рекомендуется указывать всегда:
1) тег <meta> - определяет так называемые метатеги. Является одиночным тегом. Если вы уже пытались вывести что-то в окно браузера сами, то наверняка заметили, что русские символы отображаются некорректно. Решить эту проблему помогает именно этот тег. Просто вставляйте эту строку внутри тега <head> и не запаривайтесь: <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />.
2) тег <title> - определяет имя страницы. Является парным тегом. Он нужен для определения имени вкладки. Пример: <title>Мой первый сайт</title>. Теперь в браузере у нашей страницы будет отображаться имя - "Мой первый сайт".
Теперь перейдем к тегам, которые указывать не обязательно:
1) тег <base> - определяет путь для всех файлов в документе. Является одиночным тегом. Путь указывается в атрибуте href. Синтаксис такой: <base href="images/">. В качестве значения в href можно передавать и ссылки на сайты. Разберем пример. Допустим, мы хотим вставить картинку, которая находится по пути "images/image.png". Если мы не напишем тег <base>, то путь придется прописывать полностью, а если мы напишем <base href="images/">, то для доступа к картинке надо будет написать "image.png".
2) тег <basefont> - забудьте про него, он не поддерживается многими браузерами и запрещен нашим стандартом.
3) тег <bgsound> - аналогично <basefont>.
4) тег <link> - он нужен для указания припреляемого css-документа, поэтому подробнее мы рассмотрим его, когда перейдем к css.
5) тег <script> - нужен для java-скриптов. В моем курсе они не проходятся, так что зыбываем про него.
6) тег <style> - разберемся с ним, когда перейдем к css.

Урок 3. Основы html. Тег html, атрибуты, атрибут title.
Сегодня мы познакомимся с тегом html. Этот тег является основным контейнером нашей web-страницы. Вообще говоря, он не является обязтельным и браузер будет правильно отображать страницу и без него, но, по выбраному нами стандарту этот тег необходимо указывать. Он является парным и открываться должен на второй строчке вашего документа (сразу после !DOCTYPE), а закрываться строго в конце всего документа, на последней строчке. Атрибуты этого тега не представляют для нас никакого интереса. Но раз уж выдалась возможность, давайте разберемся с одним из его атрибутов - title.
title является атрибутом у очень многих тегов, не только у html. Он нужен для всплывающей подсказки, которая будет появляется при наведелении курсора на элемент. Так как в тег html помещается вся страница, при указании ему атрибута title эта подсказка будет выводиться в любом месте документа, где не назначено других подсказок. Поэтому использовать этот атрибут в html бессмысленно, как мне кажется. Только глаза мозолить будет.
Что же это я, столько раз упомянал слово "атрибут", а как его писать, не сказал. Все очень просто. Все атрибуты тегов пишутся после имени тега и до закрывающей угловой скобки. Пример: <html title="This is site">. Никаких сложностей, правда? У тегов, обычно, несколько атрибутов и указывать их можно в абсолютно любом порядке, разделяя пробелами. Обратите внимание, как я записал атрибут title и его значение в примере. Такой записи требует от нас наш стандарт: все строчными буквами, никаких лишних пробелов между символами, значение указано в парных кавычках.
На первой картинке можете посмотреть html-код нашего сайта, на второй - как он выглядит в браузере, на третьей - html-код с атрибутом title, на четвертой - как выглядит браузер с атрибутом title в теге html. 

Урок 2. Основы html. Создание html-документа, тег !DOCTYPE.
Для создания html-документа и написания в нем кода не требуется скачивать какие-то сторонние программы. Редактировать документ можно в любом текстовом редакторе (если что, word - это не текстовый редактор), например, в блокноте. Но все же я рекомендую скачать какой-нибудь специально предназначенный для этого редактор кода (например: notepad++, adobe dreamweaver (платный!), vscode и тд.). Я буду пользоваться vscode.
Итак, для создания html-документа сначала нам потребуется создать обычный текстовый документ. Для этого щелкните правой кнопкой мыши в любом свободном месте, наведите указать мышки на пункт "Создать" и из появившегося списка выберите "Текстовый документ". Создать документ с расширением txt. Нам нужно изменить его на html. По умолчанию расширения документов не показываются, поэтому нам нужно это включить. Откройте поиск в меню "пуск" и напишите туда "Параметры Проводника". Откройте их. В появившемся окне перейдите на вкладку "Вид" и снемите галочку с пункта "Скрывать расширения для зарегестрированных типов файлов" и нажмите "ОК". Теперь у нашего документа в конце появилось ".txt", которое мы меняем на ".html". Готово! html-документ создан. Теперь, если вы дважды кликните по нему, то откроется окно браузера со вкладкой с вашим html-кодом, но так как мы его еще не писали, вкладка будет пустая.
Если вы скачали какой-нибудь редактор кода, то этот документ можно будет открыть для прямого редактирования, но если же вы этого не сделали и предпочли писать код в обычном блокноте... Вам придется постоянно менять расширение документа с ".txt" на ".html" и обратно для редактирования кода.
Теперь познакомимся с нашим первым тегом - !DOCTYPE. Прошу обратить внимания, что он пишется большими буквам, несмотря на то, что в нашем стандарте все теги должны писаться маленькими буквами. Также этот тег не будет закрываться.
Он нужен для того, чтобы браузер мог понимать, в каком стандарте мы пишем html-код. Этот тег всегда во всех наших проектах будет выглядеть одинаково:
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
Конечно, каждый параметры этого тега имеют смысл, но нам это никак не пригодится. Просто тупо вставляйте эту строчку в свой html-документ и не запаривайтесь.
На прикрепленной картинке можно посмотреть, как выглядит наша web-страница и ее html-код.

Урок 1. Основы html. Теги, стандарт xhtml 1.0 strict.
Вся структура html-документа состоит из тегов. Они нужны для того, чтобы браузер понимал, что от него хочет верстальщик (так называют дизайнеров web-страниц). Теги бывают одиночные и парные. В зависимости от стандартов, теги могут быть нарисаны различными способами. Мы будем работать с самым популярным стандартом - xhtml 1.0 strict. У него много правил и все их я не перечислю, да и не все они нам понадобятся в первое время. Пока что, нам хватит этого:
1) Все теги и их атрибуты (о них будет рассказано в следующих уроках) пишутся в нижнем регистре (маленькими буквами).
2) Все теги (как парные, так и одиночные) должны закрываться.
С первым пунктом, думаю, все понятно. Что же означает закрытие тегов из второго пункта? А вот что. Любой парный тег имеет вид: <тег>содержимое</тег>
Любой одиночный тег (по стандарту xhtml 1.0 strict) имеет вид: <тег />.
Для начала достаточно. Когда мы будем сталкиваться со случаями применения иных правил стандарта, я непременно буду об этом сообщать.